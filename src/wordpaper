#!/usr/bin/env bash

set -eu

here="$(cd "$(dirname $0)" && pwd)"

cache_dir="$HOME/.cache/wordpaper"
lists_dir="$cache_dir/lists"
images_dir="$cache_dir/images"

OUTPUT_DIR="${OUTPUT_DIR:-output}"
GEOMETRY="${GEOMETRY:-2560x1440}"
FONT="${FONT:-Noto-Serif-Italic}"

say_status() {
    local status="$1"
    local body="$2"
    local color="${3:-}"
    if [[ -n $color ]]; then
        tput setaf "$color"
    else
        case $status in
        create) tput setaf 2 ;;
        delete) tput setaf 1 ;;
        update) tput setaf 3 ;;
        exist) tput setaf 3 ;;
        *) tput setaf 6 ;;
        esac
    fi
    printf "% 14s " $status
    tput sgr0
    echo $body
}

fetch_list() {
    local word="$1"
    local dst="$lists_dir/${word// /_}.json"
    local query=$(echo $word | sed "s/\bto\s\+//" | jq -Rr @uri)
    if [[ -f $dst ]]; then
        say_status exist "$dst"
    else
        mkdir -p "$lists_dir"
        curl -H "Authorization: Client-ID $UNSPLASH_ACCESS_KEY" "https://api.unsplash.com/search/photos?orientation=landscape&query=$query" >"$dst"
        say_status create "$dst"
    fi
}

show_ids() {
    local word="$1"
    cat "$lists_dir/${word// /_}.json" | jq -r ".results[].id"
}

get_image() {
    local id="$1"
    local dst="$images_dir/$1.jpeg"
    if [[ -f $dst ]] && identify "$dst" >/dev/null 2>&1; then
        say_status exist "$dst"
    else
        mkdir -p "$images_dir"
        local url="https://unsplash.com/photos/$id/download"
        curl -sSL "$url" >"$dst"
        say_status create "$dst"
    fi
}

analize() {
    local image="$1"
    local nx="${2##*/}"
    local nx01="${2%%/*}"
    local nx0="${nx01%%-*}"
    local nx1="${nx01##*-}"
    local ny="${3##*/}"
    local ny01="${3%%/*}"
    local ny0="${ny01%%-*}"
    local ny1="${ny01##*-}"
    local padding="$4"
    local w="${GEOMETRY%%x*}"
    local h="${GEOMETRY##*x}"
    local dw=$(((w - padding * 2) / nx))
    local dh=$(((h - padding * 2) / ny))
    for j in $(seq $ny0 $ny1); do
        for i in $(seq $nx0 $nx1); do
            local x=$((i * dw + padding))
            local y=$((j * dh + padding))
            identify -crop "${dw}x${dh}+$x+$y" -format "%[entropy] %[fx:floor(mean * 100)] $x $y" "$image"
            echo
        done
    done
}

add_analisys() {
    local id="$1"
    local img="$images_dir/$1.jpeg"
    local text1="$2"
    local text2="$3"
    local dst="$OUTPUT_DIR/$1-${text2// /_}-$GEOMETRY.jpeg"
    mkdir -p "$OUTPUT_DIR"

    local w="${GEOMETRY%%x*}"
    local h="${GEOMETRY##*x}"
    convert \
        -gravity center \
        -resize "$GEOMETRY^" \
        -extent "$GEOMETRY" \
        "$img" "$dst"

    cp "$dst" "${dst%%.jpeg}_tmp.jpeg"
    analize "${dst%%.jpeg}_tmp.jpeg" 0-3/4 0-15/16 100 | while read -r line; do
        local xs=($line)
        local entropy="${xs[0]}"
        local mean="${xs[1]}"
        local x="${xs[2]}"
        local y="${xs[3]}"
        local color="$( ((50 < mean)) && echo black || echo white)"
        convert \
            -fill "$color" \
            -font "$FONT" \
            -pointsize 36 \
            -gravity northwest \
            -annotate "+$x+$y" "$(printf "(%d, %d) %.3f %d" $y $x $entropy $mean)" \
            "$dst" "$dst"
    done
    rm -f "${dst%%.jpeg}_tmp.jpeg"
    say_status analize "$dst"
}

add_text() {
    local id="$1"
    local img="$images_dir/$1.jpeg"
    local text1="$2"
    local text2="$3"
    local dst="$OUTPUT_DIR/$1-${text2// /_}-$GEOMETRY.jpeg"
    if [[ -f $dst ]]; then
        say_status exist "$dst"
    else
        mkdir -p "$OUTPUT_DIR"

        local w="${GEOMETRY%%x*}"
        local h="${GEOMETRY##*x}"
        convert \
            -gravity center \
            -resize "$GEOMETRY^" \
            -extent "$GEOMETRY" \
            "$img" "$dst"

        cp "$dst" "${dst%%.jpeg}_tmp.jpeg"
        analize "${dst%%.jpeg}_tmp.jpeg" 0-0/4 0-7/16 100 | sort | head -n 1 | while read -r line; do
            local xs=($line)
            local entropy="${xs[0]}"
            local mean="${xs[1]}"
            local x="${xs[2]}"
            local y="${xs[3]}"
            local color="$( ((50 < mean)) && echo black || echo white)"
            convert \
                -fill $color \
                -font "$FONT" \
                -pointsize 96 \
                -gravity northwest \
                -annotate "+$x+$y" "${text1}" \
                "$dst" "$dst"
        done

        analize "${dst%%.jpeg}_tmp.jpeg" 3-3/4 5-11/16 100 | sort | head -n 1 | while read -r line; do
            local xs=($line)
            local entropy="${xs[0]}"
            local mean="${xs[1]}"
            local x="${xs[2]}"
            local y="${xs[3]}"
            local color="$( ((50 < mean)) && echo black || echo white)"
            convert \
                -fill $color \
                -font "$FONT" \
                -pointsize 72 \
                -gravity northeast \
                -annotate "+100+$y" "${text2^}" \
                "$dst" "$dst"
        done

        rm -f "${dst%%.jpeg}_tmp.jpeg"
        say_status create "$dst"
    fi
}

forge() {
    local word1="$1"
    local word2="$2"
    say_status forge "$(printf "%s: %s" "$word1" "$word2")"

    fetch_list "$word2"
    for id in $(show_ids "$word2"); do
        get_image "$id"
        add_text "$id" "$word1" "$word2"
        # add_analisys "$id" "$word1" "$word2"
    done
}

from_csv() {
    while read -r line; do
        if [[ $line =~ ([^,]*),[[:blank:]]*([^,]*) ]]; then
            word1="${BASH_REMATCH[1]}"
            word2="${BASH_REMATCH[2]}"
            forge "$word2" "$word1"
        fi
    done
}

case ${1:-} in
--version)
    echo "${VERSION:-0.0.0}"
    ;;
list-font)
    convert -list font | grep Font: | cut -d ":" -f 2
    ;;
*)
    from_csv
    ;;
esac
